// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: tenant/v1/tenant.service.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import {
  CreateTenantRequest,
  CreateTenantResponse,
  DeleteTenantRequest,
  DeleteTenantResponse,
  GetAvailableTenantsRequest,
  GetAvailableTenantsResponse,
  GetTenantRequest,
  GetTenantResponse,
  GetTenantsRequest,
  GetTenantsResponse,
  UpdateTenantRequest,
  UpdateTenantResponse,
} from "./tenant.event";

export const protobufPackage = "gen.go.tenant.v1";

export interface TenantService {
  Create(request: CreateTenantRequest): Promise<CreateTenantResponse>;
  Get(request: GetTenantRequest): Promise<GetTenantResponse>;
  GetAll(request: GetTenantsRequest): Promise<GetTenantsResponse>;
  GetAvailable(request: GetAvailableTenantsRequest): Promise<GetAvailableTenantsResponse>;
  Update(request: UpdateTenantRequest): Promise<UpdateTenantResponse>;
  Delete(request: DeleteTenantRequest): Promise<DeleteTenantResponse>;
}

export const TenantServiceServiceName = "gen.go.tenant.v1.TenantService";
export class TenantServiceClientImpl implements TenantService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TenantServiceServiceName;
    this.rpc = rpc;
    this.Create = this.Create.bind(this);
    this.Get = this.Get.bind(this);
    this.GetAll = this.GetAll.bind(this);
    this.GetAvailable = this.GetAvailable.bind(this);
    this.Update = this.Update.bind(this);
    this.Delete = this.Delete.bind(this);
  }
  Create(request: CreateTenantRequest): Promise<CreateTenantResponse> {
    const data = CreateTenantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Create", data);
    return promise.then((data) => CreateTenantResponse.decode(_m0.Reader.create(data)));
  }

  Get(request: GetTenantRequest): Promise<GetTenantResponse> {
    const data = GetTenantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Get", data);
    return promise.then((data) => GetTenantResponse.decode(_m0.Reader.create(data)));
  }

  GetAll(request: GetTenantsRequest): Promise<GetTenantsResponse> {
    const data = GetTenantsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAll", data);
    return promise.then((data) => GetTenantsResponse.decode(_m0.Reader.create(data)));
  }

  GetAvailable(request: GetAvailableTenantsRequest): Promise<GetAvailableTenantsResponse> {
    const data = GetAvailableTenantsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAvailable", data);
    return promise.then((data) => GetAvailableTenantsResponse.decode(_m0.Reader.create(data)));
  }

  Update(request: UpdateTenantRequest): Promise<UpdateTenantResponse> {
    const data = UpdateTenantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => UpdateTenantResponse.decode(_m0.Reader.create(data)));
  }

  Delete(request: DeleteTenantRequest): Promise<DeleteTenantResponse> {
    const data = DeleteTenantRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Delete", data);
    return promise.then((data) => DeleteTenantResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
