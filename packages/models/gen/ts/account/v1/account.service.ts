// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: account/v1/account.service.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import {
  ForgotPasswordRequest,
  ForgotPasswordResponse,
  LoginRequest,
  LoginResponse,
  LogoutRequest,
  LogoutResponse,
  RegisterRequest,
  RegisterResponse,
  ResendVerificationCodeRequest,
  ResendVerificationCodeResponse,
  UpdateEmailRequest,
  UpdateEmailResponse,
  UpdatePasswordRequest,
  UpdatePasswordResponse,
  VerifyAccountRequest,
  VerifyAccountResponse,
  VerifyActivationLinkRequest,
  VerifyActivationLinkResponse,
} from "./account.event";

export const protobufPackage = "gen.go.auth.v1";

export interface AccountServicePort {
  login(request: LoginRequest): Promise<LoginResponse>;
  register(request: RegisterRequest): Promise<RegisterResponse>;
  logout(request: LogoutRequest): Promise<LogoutResponse>;
  resendVerificationCode(request: ResendVerificationCodeRequest): Promise<ResendVerificationCodeResponse>;
  updatePassword(request: UpdatePasswordRequest): Promise<UpdatePasswordResponse>;
  updateEmail(request: UpdateEmailRequest): Promise<UpdateEmailResponse>;
  verifyAccount(request: VerifyAccountRequest): Promise<VerifyAccountResponse>;
  verifyActivationLink(request: VerifyActivationLinkRequest): Promise<VerifyActivationLinkResponse>;
  forgotPassword(request: ForgotPasswordRequest): Promise<ForgotPasswordResponse>;
}

export const AccountServicePortServiceName = "gen.go.auth.v1.AccountServicePort";
export class AccountServicePortClientImpl implements AccountServicePort {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AccountServicePortServiceName;
    this.rpc = rpc;
    this.login = this.login.bind(this);
    this.register = this.register.bind(this);
    this.logout = this.logout.bind(this);
    this.resendVerificationCode = this.resendVerificationCode.bind(this);
    this.updatePassword = this.updatePassword.bind(this);
    this.updateEmail = this.updateEmail.bind(this);
    this.verifyAccount = this.verifyAccount.bind(this);
    this.verifyActivationLink = this.verifyActivationLink.bind(this);
    this.forgotPassword = this.forgotPassword.bind(this);
  }
  login(request: LoginRequest): Promise<LoginResponse> {
    const data = LoginRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "login", data);
    return promise.then((data) => LoginResponse.decode(_m0.Reader.create(data)));
  }

  register(request: RegisterRequest): Promise<RegisterResponse> {
    const data = RegisterRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "register", data);
    return promise.then((data) => RegisterResponse.decode(_m0.Reader.create(data)));
  }

  logout(request: LogoutRequest): Promise<LogoutResponse> {
    const data = LogoutRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "logout", data);
    return promise.then((data) => LogoutResponse.decode(_m0.Reader.create(data)));
  }

  resendVerificationCode(request: ResendVerificationCodeRequest): Promise<ResendVerificationCodeResponse> {
    const data = ResendVerificationCodeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "resendVerificationCode", data);
    return promise.then((data) => ResendVerificationCodeResponse.decode(_m0.Reader.create(data)));
  }

  updatePassword(request: UpdatePasswordRequest): Promise<UpdatePasswordResponse> {
    const data = UpdatePasswordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "updatePassword", data);
    return promise.then((data) => UpdatePasswordResponse.decode(_m0.Reader.create(data)));
  }

  updateEmail(request: UpdateEmailRequest): Promise<UpdateEmailResponse> {
    const data = UpdateEmailRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "updateEmail", data);
    return promise.then((data) => UpdateEmailResponse.decode(_m0.Reader.create(data)));
  }

  verifyAccount(request: VerifyAccountRequest): Promise<VerifyAccountResponse> {
    const data = VerifyAccountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "verifyAccount", data);
    return promise.then((data) => VerifyAccountResponse.decode(_m0.Reader.create(data)));
  }

  verifyActivationLink(request: VerifyActivationLinkRequest): Promise<VerifyActivationLinkResponse> {
    const data = VerifyActivationLinkRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "verifyActivationLink", data);
    return promise.then((data) => VerifyActivationLinkResponse.decode(_m0.Reader.create(data)));
  }

  forgotPassword(request: ForgotPasswordRequest): Promise<ForgotPasswordResponse> {
    const data = ForgotPasswordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "forgotPassword", data);
    return promise.then((data) => ForgotPasswordResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
