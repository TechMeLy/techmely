// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.service.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/techmely/models/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServicePortName is the fully-qualified name of the UserServicePort service.
	UserServicePortName = "gen.go.user.v1.UserServicePort"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServicePortRegisterProcedure is the fully-qualified name of the UserServicePort's register
	// RPC.
	UserServicePortRegisterProcedure = "/gen.go.user.v1.UserServicePort/register"
	// UserServicePortGetProcedure is the fully-qualified name of the UserServicePort's get RPC.
	UserServicePortGetProcedure = "/gen.go.user.v1.UserServicePort/get"
	// UserServicePortGetAllProcedure is the fully-qualified name of the UserServicePort's getAll RPC.
	UserServicePortGetAllProcedure = "/gen.go.user.v1.UserServicePort/getAll"
	// UserServicePortUpdateProcedure is the fully-qualified name of the UserServicePort's update RPC.
	UserServicePortUpdateProcedure = "/gen.go.user.v1.UserServicePort/update"
	// UserServicePortDeleteProcedure is the fully-qualified name of the UserServicePort's delete RPC.
	UserServicePortDeleteProcedure = "/gen.go.user.v1.UserServicePort/delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServicePortServiceDescriptor        = v1.File_user_v1_user_service_proto.Services().ByName("UserServicePort")
	userServicePortRegisterMethodDescriptor = userServicePortServiceDescriptor.Methods().ByName("register")
	userServicePortGetMethodDescriptor      = userServicePortServiceDescriptor.Methods().ByName("get")
	userServicePortGetAllMethodDescriptor   = userServicePortServiceDescriptor.Methods().ByName("getAll")
	userServicePortUpdateMethodDescriptor   = userServicePortServiceDescriptor.Methods().ByName("update")
	userServicePortDeleteMethodDescriptor   = userServicePortServiceDescriptor.Methods().ByName("delete")
)

// UserServicePortClient is a client for the gen.go.user.v1.UserServicePort service.
type UserServicePortClient interface {
	Register(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	GetAll(context.Context, *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
}

// NewUserServicePortClient constructs a client for the gen.go.user.v1.UserServicePort service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServicePortClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServicePortClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServicePortClient{
		register: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserServicePortRegisterProcedure,
			connect.WithSchema(userServicePortRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServicePortGetProcedure,
			connect.WithSchema(userServicePortGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAll: connect.NewClient[v1.GetUsersRequest, v1.GetUsersResponse](
			httpClient,
			baseURL+UserServicePortGetAllProcedure,
			connect.WithSchema(userServicePortGetAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+UserServicePortUpdateProcedure,
			connect.WithSchema(userServicePortUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+UserServicePortDeleteProcedure,
			connect.WithSchema(userServicePortDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServicePortClient implements UserServicePortClient.
type userServicePortClient struct {
	register *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	get      *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	getAll   *connect.Client[v1.GetUsersRequest, v1.GetUsersResponse]
	update   *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	delete   *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
}

// Register calls gen.go.user.v1.UserServicePort.register.
func (c *userServicePortClient) Register(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Get calls gen.go.user.v1.UserServicePort.get.
func (c *userServicePortClient) Get(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetAll calls gen.go.user.v1.UserServicePort.getAll.
func (c *userServicePortClient) GetAll(ctx context.Context, req *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error) {
	return c.getAll.CallUnary(ctx, req)
}

// Update calls gen.go.user.v1.UserServicePort.update.
func (c *userServicePortClient) Update(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls gen.go.user.v1.UserServicePort.delete.
func (c *userServicePortClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// UserServicePortHandler is an implementation of the gen.go.user.v1.UserServicePort service.
type UserServicePortHandler interface {
	Register(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	GetAll(context.Context, *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
}

// NewUserServicePortHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServicePortHandler(svc UserServicePortHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServicePortRegisterHandler := connect.NewUnaryHandler(
		UserServicePortRegisterProcedure,
		svc.Register,
		connect.WithSchema(userServicePortRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePortGetHandler := connect.NewUnaryHandler(
		UserServicePortGetProcedure,
		svc.Get,
		connect.WithSchema(userServicePortGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePortGetAllHandler := connect.NewUnaryHandler(
		UserServicePortGetAllProcedure,
		svc.GetAll,
		connect.WithSchema(userServicePortGetAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePortUpdateHandler := connect.NewUnaryHandler(
		UserServicePortUpdateProcedure,
		svc.Update,
		connect.WithSchema(userServicePortUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePortDeleteHandler := connect.NewUnaryHandler(
		UserServicePortDeleteProcedure,
		svc.Delete,
		connect.WithSchema(userServicePortDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gen.go.user.v1.UserServicePort/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServicePortRegisterProcedure:
			userServicePortRegisterHandler.ServeHTTP(w, r)
		case UserServicePortGetProcedure:
			userServicePortGetHandler.ServeHTTP(w, r)
		case UserServicePortGetAllProcedure:
			userServicePortGetAllHandler.ServeHTTP(w, r)
		case UserServicePortUpdateProcedure:
			userServicePortUpdateHandler.ServeHTTP(w, r)
		case UserServicePortDeleteProcedure:
			userServicePortDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServicePortHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServicePortHandler struct{}

func (UnimplementedUserServicePortHandler) Register(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.register is not implemented"))
}

func (UnimplementedUserServicePortHandler) Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.get is not implemented"))
}

func (UnimplementedUserServicePortHandler) GetAll(context.Context, *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.getAll is not implemented"))
}

func (UnimplementedUserServicePortHandler) Update(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.update is not implemented"))
}

func (UnimplementedUserServicePortHandler) Delete(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.delete is not implemented"))
}
