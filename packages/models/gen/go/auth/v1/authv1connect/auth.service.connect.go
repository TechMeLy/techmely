// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.service.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/techmely/models/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PreferencesServiceName is the fully-qualified name of the PreferencesService service.
	PreferencesServiceName = "gen.go.auth.v1.PreferencesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PreferencesServiceGetProcedure is the fully-qualified name of the PreferencesService's Get RPC.
	PreferencesServiceGetProcedure = "/gen.go.auth.v1.PreferencesService/Get"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	preferencesServiceServiceDescriptor   = v1.File_auth_v1_auth_service_proto.Services().ByName("PreferencesService")
	preferencesServiceGetMethodDescriptor = preferencesServiceServiceDescriptor.Methods().ByName("Get")
)

// PreferencesServiceClient is a client for the gen.go.auth.v1.PreferencesService service.
type PreferencesServiceClient interface {
	Get(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
}

// NewPreferencesServiceClient constructs a client for the gen.go.auth.v1.PreferencesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPreferencesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PreferencesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &preferencesServiceClient{
		get: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+PreferencesServiceGetProcedure,
			connect.WithSchema(preferencesServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// preferencesServiceClient implements PreferencesServiceClient.
type preferencesServiceClient struct {
	get *connect.Client[v1.LoginRequest, v1.LoginResponse]
}

// Get calls gen.go.auth.v1.PreferencesService.Get.
func (c *preferencesServiceClient) Get(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// PreferencesServiceHandler is an implementation of the gen.go.auth.v1.PreferencesService service.
type PreferencesServiceHandler interface {
	Get(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
}

// NewPreferencesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPreferencesServiceHandler(svc PreferencesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	preferencesServiceGetHandler := connect.NewUnaryHandler(
		PreferencesServiceGetProcedure,
		svc.Get,
		connect.WithSchema(preferencesServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gen.go.auth.v1.PreferencesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PreferencesServiceGetProcedure:
			preferencesServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPreferencesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPreferencesServiceHandler struct{}

func (UnimplementedPreferencesServiceHandler) Get(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.auth.v1.PreferencesService.Get is not implemented"))
}
