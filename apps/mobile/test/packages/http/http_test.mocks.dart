// Mocks generated by Mockito 5.4.4 from annotations
// in techmely_app/test/packages/http/http_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i6;
import 'dart:typed_data' as _i9;

import 'package:http/http.dart' as _i2;
import 'package:http_client/src/client/intercepted_client.dart' as _i3;
import 'package:http_client/src/client/method.dart' as _i7;
import 'package:http_client/src/interceptor/i_interceptor.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseResponse_2 extends _i1.SmartFake implements _i2.BaseResponse {
  _FakeBaseResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseRequest_3 extends _i1.SmartFake implements _i2.BaseRequest {
  _FakeBaseRequest_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InterceptedClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterceptedClient extends _i1.Mock implements _i3.InterceptedClient {
  MockInterceptedClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.IInterceptor> get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: <_i4.IInterceptor>[],
      ) as List<_i4.IInterceptor>);

  @override
  set interceptors(List<_i4.IInterceptor>? _interceptors) => super.noSuchMethod(
        Invocation.setter(
          #interceptors,
          _interceptors,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
    Map<String, String>? params,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #headers: headers,
            #params: params,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #headers: headers,
              #params: params,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Map<String, String>? params,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #params: params,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #params: params,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Map<String, String>? params,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #params: params,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #params: params,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Map<String, String>? params,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #params: params,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #params: params,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i5.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i5.Future<_i2.StreamedResponse>);

  @override
  _i5.Future<_i2.BaseResponse> sendUnstreamed({
    required _i7.Method? method,
    required Uri? url,
    Map<String, String>? headers,
    Map<String, String>? params,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendUnstreamed,
          [],
          {
            #method: method,
            #url: url,
            #headers: headers,
            #params: params,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.BaseResponse>.value(_FakeBaseResponse_2(
          this,
          Invocation.method(
            #sendUnstreamed,
            [],
            {
              #method: method,
              #url: url,
              #headers: headers,
              #params: params,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.BaseResponse>);

  @override
  _i5.Future<_i2.BaseRequest> interceptRequest(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #interceptRequest,
          [request],
        ),
        returnValue: _i5.Future<_i2.BaseRequest>.value(_FakeBaseRequest_3(
          this,
          Invocation.method(
            #interceptRequest,
            [request],
          ),
        )),
      ) as _i5.Future<_i2.BaseRequest>);

  @override
  _i5.Future<_i2.BaseResponse> interceptResponse(_i2.BaseResponse? response) =>
      (super.noSuchMethod(
        Invocation.method(
          #interceptResponse,
          [response],
        ),
        returnValue: _i5.Future<_i2.BaseResponse>.value(_FakeBaseResponse_2(
          this,
          Invocation.method(
            #interceptResponse,
            [response],
          ),
        )),
      ) as _i5.Future<_i2.BaseResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i9.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
      ) as _i5.Future<_i9.Uint8List>);
}
